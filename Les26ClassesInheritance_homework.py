"""‚úÖ –ó–∞–¥–∞—á–∞ 1: –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∏–π –∑–∞—Å—ñ–±
–ë–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π –∫–ª–∞—Å: Vehicle
–ê—Ç—Ä–∏–±—É—Ç–∏: brand, model, year
–ú–µ—Ç–æ–¥: display_info() ‚Äî –≤–∏–≤–æ–¥–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç.

–ö–ª–∞—Å-–Ω–∞—â–∞–¥–æ–∫: Car
–î–æ–¥–∞—Ç–∫–æ–≤–∏–π –∞—Ç—Ä–∏–±—É—Ç: doors (–∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–≤–µ—Ä–µ–π)
–ù–æ–≤–∏–π –º–µ—Ç–æ–¥: is_family_friendly() ‚Äî —è–∫—â–æ –¥–≤–µ—Ä–µ–π ‚â• 4, –≤–∏–≤–æ–¥–∏—Ç—å "Good for family"."""

class Vehicle():

    def __init__(self, brand, model, year):
        self.brand = brand
        self.model = model
        self.year = year

    def display_info(self):
        print(f"All information: brand={self.brand}, model={self.model}, year={self.year}")


class Car(Vehicle):

    def __init__(self, brand, model, year, doors):
        super().__init__(brand, model, year)
        self.doors = int(doors)

    def is_family_friendly(self):
        if self.doors >= 4:
            print(f"Good for family")
        else:
            print(f"Good for free people")

# mini=Car("BMW","Counrtyman",2008,2)
# mini.display_info()
# mini.is_family_friendly()


"""‚úÖ –ó–∞–¥–∞—á–∞ 2: –ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∏
–ë–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π –∫–ª–∞—Å: Employee
–ê—Ç—Ä–∏–±—É—Ç–∏: name, position, salary
–ú–µ—Ç–æ–¥: display_info() ‚Äî –≤–∏–≤–æ–¥–∏—Ç—å —É—Å—ñ –∞—Ç—Ä–∏–±—É—Ç–∏.

–ö–ª–∞—Å-–Ω–∞—â–∞–¥–æ–∫: Manager
–î–æ–¥–∞—Ç–∫–æ–≤–∏–π –∞—Ç—Ä–∏–±—É—Ç: team_size
–ù–æ–≤–∏–π –º–µ—Ç–æ–¥: has_big_team() ‚Äî —è–∫—â–æ team_size > 10, –≤–∏–≤–æ–¥–∏—Ç—å "Big team"."""


class Employee():

    def __init__(self,name,position,salary):
        self.name=name
        self.position=position
        self.salary=salary

    def display_info(self):
        return self.name,self.position,self.salary

class Manager(Employee):

    def __init__(self,name,position,salary,team_size):
        super().__init__(name,position,salary)
        self.team_size=team_size

    def has_big_team(self):
        if self.team_size>10:
            print("Big team")
        else:
            print("Standart")


# team_1=Manager("Alex","cleaner",20000,11)
# team_1.has_big_team()




"""# ‚úÖ –ó–∞–¥–∞—á–∞ 3: –î–æ–º–∞—à–Ω—ñ —Ç–≤–∞—Ä–∏–Ω–∏
# –ë–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π –∫–ª–∞—Å: Pet
# –ê—Ç—Ä–∏–±—É—Ç–∏: name, species
# –ú–µ—Ç–æ–¥: make_sound() ‚Äî –≤–∏–≤–æ–¥–∏—Ç—å "Some generic sound".

# –ö–ª–∞—Å-–Ω–∞—â–∞–¥–æ–∫: Dog
# –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∏—Ç–∏ –º–µ—Ç–æ–¥: make_sound() ‚Äî –∑–∞–º—ñ—Å—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∑–≤—É–∫—É –≤–∏–≤–æ–¥–∏—Ç—å "Woof!"
# –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –º–µ—Ç–æ–¥: fetch() ‚Äî –≤–∏–≤–æ–¥–∏—Ç—å "Dog is fetching the ball"."""

class Pet():

    def __init__(self,name,species):
        self.name=name
        self.species=species

    def make_sound(self):
        print(f"Some generic sound: {self.name}={self.species}")

class Dog(Pet):

    def __init__(self,name,species='hamster'):
        super().__init__(name,species)#or species="ayff!" or "ayff!" -- it`s default from class Pet

    def make_sound_new(self):
        print("Woof!")

    def fetch(self):
        print("Dog is fetching the ball")

# """exemple ‚Ññ1"""
# colli=Dog("Alexa",'aff!')
# colli.make_sound()
# """exemple ‚Ññ2"""
# colli=Dog("Alexa")
# colli.make_sound()
# """exemple ‚Ññ3"""
# colli=Dog("Alexa")
# colli.make_sound_new()



"""üîπ –ó–∞–¥–∞—á–∞ 4: –ü—Ç–∞—Ö–∏
–°—Ç–≤–æ—Ä–∏ –±–∞–∑–æ–≤–∏–π –∫–ª–∞—Å Bird –∑ —Ç–∞–∫–∏–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏:
name ‚Äì —ñ–º'—è –ø—Ç–∞—Ö–∞
can_fly ‚Äì –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º True

–ú–µ—Ç–æ–¥–∏:
make_sound() ‚Äî –≤–∏–≤–æ–¥–∏—Ç—å "Chirp!"
description() ‚Äî –≤–∏–≤–æ–¥–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—Ç–∞—Ö–∞

–°—Ç–≤–æ—Ä–∏ –∫–ª–∞—Å Penguin, —è–∫–∏–π –Ω–∞—Å–ª—ñ–¥—É—î—Ç—å—Å—è –≤—ñ–¥ Bird, –∞–ª–µ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î can_fly —É False.
–î–æ–¥–∞–π –º–µ—Ç–æ–¥ swim(), —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å "Penguin swims well!".

‚úÖ –ú–µ—Ç–∞: –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä—É–≤–∞—Ç–∏ –∑–º—ñ–Ω—É –¥–µ—Ñ–æ–ª—Ç–Ω–∏—Ö –∞—Ç—Ä–∏–±—É—Ç—ñ–≤ —É –Ω–∞—â–∞–¥–∫—É."""

class Bird():
    def __init__(self,name,can_fly=True):
        self.name=name
        self.can_fly=can_fly

    def make_sound(self):
        print("Chirp!")

    def description(self):
        print(f"all information about this bird: name={self.name}, can_fly={self.can_fly}")

class Penguin(Bird):
    def __init__(self,name,can_fly=False):
        super().__init__(name,can_fly)

    def swim(self):
        print("Penguin swims well!")

new_bird=Penguin("Tomas")
new_bird.description()



"""üîπ –ó–∞–¥–∞—á–∞ 5: –ú—É–∑–∏—á–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏
–°—Ç–≤–æ—Ä–∏ –±–∞–∑–æ–≤–∏–π –∫–ª–∞—Å Instrument:
–ê—Ç—Ä–∏–±—É—Ç–∏: name, type (—Ç–∏–ø —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É, –Ω–∞–ø—Ä. "–ø–µ—Ä–∫—É—Å—ñ—è", "—Å—Ç—Ä—É–Ω–Ω–∏–π")
–ú–µ—Ç–æ–¥: play() ‚Äî –≤–∏–≤–æ–¥–∏—Ç—å "Playing sound from {name}"

–°—Ç–≤–æ—Ä–∏ –∫–ª–∞—Å Guitar:
–£—Å–ø–∞–¥–∫–æ–≤—É—î—Ç—å—Å—è –≤—ñ–¥ Instrument
–ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —Ç–∏–ø ‚Äî "—Å—Ç—Ä—É–Ω–Ω–∏–π"
–î–æ–¥–∞–π –º–µ—Ç–æ–¥ tune() ‚Äî –≤–∏–≤–æ–¥–∏—Ç—å "Guitar is tuned!"

‚úÖ –ú–µ—Ç–∞: –ø–æ—Ç—Ä–µ–Ω—É–≤–∞—Ç–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–ª–∞—Å—É-–Ω–∞—â–∞–¥–∫–∞ + –¥–æ–¥–∞—Ç–∏ –≤–ª–∞—Å–Ω—ñ –º–µ—Ç–æ–¥–∏."""

class Instrument():

    def __init__(self,name,type="percussion"):
        self.name=name
        self.type=type

    def play(self):
        print(f"Playing sound from {self.name}")

class Guitar(Instrument):
    def __init__(self,name,type="stringed"):
        super().__init__(name,type)

    def tune(self):
        print("Guitar is tuned!")

instrument_1=Instrument("viola")
instrument_2=Guitar("electro_guitar")
instrument_1.play()
instrument_2.tune()